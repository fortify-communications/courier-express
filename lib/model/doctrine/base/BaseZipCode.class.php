<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ZipCode', 'doctrine');

/**
 * BaseZipCode
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $zip_code
 * @property float $lat
 * @property float $lon
 * @property string $city
 * @property string $state_prefix
 * @property string $county
 * @property string $z_type
 * @property float $xaxis
 * @property float $yaxis
 * @property float $zaxis
 * @property string $z_primary
 * @property string $worldregion
 * @property string $country
 * @property string $locationtext
 * @property string $location
 * @property string $population
 * @property integer $housingunits
 * @property integer $income
 * @property string $landarea
 * @property string $waterarea
 * @property string $decommisioned
 * @property string $militaryrestrictioncodes
 * @property string $decommisionedplace
 * @property integer $id
 * 
 * @method string  getZipCode()                  Returns the current record's "zip_code" value
 * @method float   getLat()                      Returns the current record's "lat" value
 * @method float   getLon()                      Returns the current record's "lon" value
 * @method string  getCity()                     Returns the current record's "city" value
 * @method string  getStatePrefix()              Returns the current record's "state_prefix" value
 * @method string  getCounty()                   Returns the current record's "county" value
 * @method string  getZType()                    Returns the current record's "z_type" value
 * @method float   getXaxis()                    Returns the current record's "xaxis" value
 * @method float   getYaxis()                    Returns the current record's "yaxis" value
 * @method float   getZaxis()                    Returns the current record's "zaxis" value
 * @method string  getZPrimary()                 Returns the current record's "z_primary" value
 * @method string  getWorldregion()              Returns the current record's "worldregion" value
 * @method string  getCountry()                  Returns the current record's "country" value
 * @method string  getLocationtext()             Returns the current record's "locationtext" value
 * @method string  getLocation()                 Returns the current record's "location" value
 * @method string  getPopulation()               Returns the current record's "population" value
 * @method integer getHousingunits()             Returns the current record's "housingunits" value
 * @method integer getIncome()                   Returns the current record's "income" value
 * @method string  getLandarea()                 Returns the current record's "landarea" value
 * @method string  getWaterarea()                Returns the current record's "waterarea" value
 * @method string  getDecommisioned()            Returns the current record's "decommisioned" value
 * @method string  getMilitaryrestrictioncodes() Returns the current record's "militaryrestrictioncodes" value
 * @method string  getDecommisionedplace()       Returns the current record's "decommisionedplace" value
 * @method integer getId()                       Returns the current record's "id" value
 * @method ZipCode setZipCode()                  Sets the current record's "zip_code" value
 * @method ZipCode setLat()                      Sets the current record's "lat" value
 * @method ZipCode setLon()                      Sets the current record's "lon" value
 * @method ZipCode setCity()                     Sets the current record's "city" value
 * @method ZipCode setStatePrefix()              Sets the current record's "state_prefix" value
 * @method ZipCode setCounty()                   Sets the current record's "county" value
 * @method ZipCode setZType()                    Sets the current record's "z_type" value
 * @method ZipCode setXaxis()                    Sets the current record's "xaxis" value
 * @method ZipCode setYaxis()                    Sets the current record's "yaxis" value
 * @method ZipCode setZaxis()                    Sets the current record's "zaxis" value
 * @method ZipCode setZPrimary()                 Sets the current record's "z_primary" value
 * @method ZipCode setWorldregion()              Sets the current record's "worldregion" value
 * @method ZipCode setCountry()                  Sets the current record's "country" value
 * @method ZipCode setLocationtext()             Sets the current record's "locationtext" value
 * @method ZipCode setLocation()                 Sets the current record's "location" value
 * @method ZipCode setPopulation()               Sets the current record's "population" value
 * @method ZipCode setHousingunits()             Sets the current record's "housingunits" value
 * @method ZipCode setIncome()                   Sets the current record's "income" value
 * @method ZipCode setLandarea()                 Sets the current record's "landarea" value
 * @method ZipCode setWaterarea()                Sets the current record's "waterarea" value
 * @method ZipCode setDecommisioned()            Sets the current record's "decommisioned" value
 * @method ZipCode setMilitaryrestrictioncodes() Sets the current record's "militaryrestrictioncodes" value
 * @method ZipCode setDecommisionedplace()       Sets the current record's "decommisionedplace" value
 * @method ZipCode setId()                       Sets the current record's "id" value
 * 
 * @package    cexp
 * @subpackage model
 * @author     Courier Express
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseZipCode extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('zip_code');
        $this->hasColumn('zip_code', 'string', 5, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 5,
             ));
        $this->hasColumn('lat', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('lon', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('city', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('state_prefix', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('county', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('z_type', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('xaxis', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('yaxis', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('zaxis', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('z_primary', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('worldregion', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('country', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('locationtext', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('location', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('population', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('housingunits', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('income', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('landarea', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('waterarea', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('decommisioned', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('militaryrestrictioncodes', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('decommisionedplace', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}